#
# A couple of useful guides & docs:
#
# - Main Bitrise CLI docs: https://github.com/bitrise-io/bitrise/tree/master/_docs
# - Step Development Guideline: https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
# - Bitrise.yml format spec: https://github.com/bitrise-io/bitrise/blob/master/_docs/bitrise-yml-format-spec.md
# - Bitrise docs: http://devcenter.bitrise.io/
# - Bitrise CLI guides: http://devcenter.bitrise.io/bitrise-cli/

title: |-
  JaCoCo Report Parser
summary: |
  Parse a JaCoCo generated report and output the code coverage percentages to be used by other steps.
description: |
  This step parses a JaCoCo generated XML report in the `jacoco_report_path` and outputs the coverage
  percentages in a String format to environment / output variables to be used in other steps.

  It basically gets the top-level counter information for each coverage type and calculates de percentage
  by doing `covered` / `covered` + `missed`.

  Input:
  `jacoco_report_path` receives the reported file path (it must be an xml)
  
  Outputs:
  `JACOCO_INSTRUCTION_COVERAGE` contains the instruction coverage percentage calculated from the report
  `JACOCO_BRANCH_COVERAGE` contains the branch coverage percentage calculated from the report
  `JACOCO_LINE_COVERAGE` contains the line coverage percentage calculated from the report
  `JACOCO_COMPLEXITY_COVERAGE` contains the complexity coverage percentage calculated from the report
  `JACOCO_METHOD_COVERAGE` contains the method coverage percentage calculated from the report
  `JACOCO_CLASS_COVERAGE` contains the class coverage percentage calculated from the report
website: https://github.com/thomashorta/bitrise-step-jacoco-report-parser
source_code_url: https://github.com/thomashorta/bitrise-step-jacoco-report-parser
support_url: https://github.com/thomashorta/bitrise-step-jacoco-report-parser/issues
host_os_tags:
  - osx-10.10
  - ubuntu-16.04

# If this step should be available only for certain project types
# just uncomment this `project_type_tags` section and include all the
# project types supported by the step. If the step can be used for all
# project types then you can just remove this section.
# If no `project_type_tags` specified (or specified as an empty array)
# that means the step can be used for any project type.
# You can find more information about project type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
#
project_type_tags:
  - android
  - xamarin
  - react-native
  - cordova
  - ionic
  - flutter

# Type tags are used for categorizing steps, for easier step discovery in Step Libraries.
# You can find more information about type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
type_tags:
  - test
  - utility

is_requires_admin_user: false
is_always_run: false
is_skippable: false

deps:
  brew:
  - name: git
  - name: wget
  apt_get:
  - name: git
  - name: wget


toolkit:
  go:
    package_name: github.com/thomashorta/bitrise-step-jacoco-report-parser


inputs:
  - jacoco_report_path: $BITRISE_SOURCE_DIR/build/reports/jacoco.xml
    opts:
      is_required: true
      title: "The JaCoCo report file path"
      summary: Exact path location to the JaCoCo report file (usually points to a jacoco.xml file).
      description: |
        The report will be parsed from this input to run this step.

        Default value: `$BITRISE_SOURCE_DIR/build/reports/jacoco.xml`

outputs:
  - JACOCO_INSTRUCTION_COVERAGE:
    opts:
      title: "Instruction coverage percentage"
      summary: Total instruction coverage percentage parsed from the report.
      description: |
        This is the total instruciton coverage percentage parsed from the report
        taking into consideration the report summary for the whole run.

        This is calculated by taking the `covered` amount divided by the `covered` + `missed` amount.
        It returns "N/A" if the coverage information was not found.
  - JACOCO_BRANCH_COVERAGE:
    opts:
      title: "Branch coverage percentage"
      summary: Total branch coverage percentage parsed from the report.
      description: |
        This is the total branch coverage percentage parsed from the report
        taking into consideration the report summary for the whole run.

        This is calculated by taking the `covered` amount divided by the `covered` + `missed` amount.
        It returns "N/A" if the coverage information was not found.
  - JACOCO_LINE_COVERAGE:
    opts:
      title: "Line coverage percentage"
      summary: Total line coverage percentage parsed from the report.
      description: |
        This is the total line coverage percentage parsed from the report
        taking into consideration the report summary for the whole run.

        This is calculated by taking the `covered` amount divided by the `covered` + `missed` amount.
        It returns "N/A" if the coverage information was not found.
  - JACOCO_COMPLEXITY_COVERAGE:
    opts:
      title: "Complexity coverage percentage"
      summary: Total complexity coverage percentage parsed from the report.
      description: |
        This is the total complexity coverage percentage parsed from the report
        taking into consideration the report summary for the whole run.

        This is calculated by taking the `covered` amount divided by the `covered` + `missed` amount.
        It returns "N/A" if the coverage information was not found.
  - JACOCO_METHOD_COVERAGE:
    opts:
      title: "Method coverage percentage"
      summary: Total method coverage percentage parsed from the report.
      description: |
        This is the total method coverage percentage parsed from the report
        taking into consideration the report summary for the whole run.

        This is calculated by taking the `covered` amount divided by the `covered` + `missed` amount.
        It returns "N/A" if the coverage information was not found.
  - JACOCO_CLASS_COVERAGE:
    opts:
      title: "Class coverage percentage"
      summary: Total class coverage percentage parsed from the report.
      description: |
        This is the total class coverage percentage parsed from the report
        taking into consideration the report summary for the whole run.

        This is calculated by taking the `covered` amount divided by the `covered` + `missed` amount.
        It returns "N/A" if the coverage information was not found.
